// <auto-generated />
using System;
using ControllerApp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ControllerApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210308192032_Car_Booking_Actions_and_User_History_Log")]
    partial class Car_Booking_Actions_and_User_History_Log
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ControllerApp.Domains.Books.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("ControllerApp.Domains.Books.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ControllerApp.Domains.Cars.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCaptured")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CarId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("ControllerApp.Domains.Cars.CarBookState", b =>
                {
                    b.Property<int>("CarBookingId")
                        .HasColumnType("int");

                    b.Property<int>("CarBookStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CarBookStateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.HasKey("CarBookingId", "CarBookStatusId");

                    b.HasIndex("CarBookStateId");

                    b.HasIndex("CarBookStatusId");

                    b.ToTable("CarBookStates");
                });

            modelBuilder.Entity("ControllerApp.Domains.Cars.CarBookStatus", b =>
                {
                    b.Property<int>("CarBookStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CarBookStatusId");

                    b.ToTable("CarBookStatuses");

                    b.HasData(
                        new
                        {
                            CarBookStatusId = 1,
                            Status = "New"
                        },
                        new
                        {
                            CarBookStatusId = 2,
                            Status = "Out"
                        },
                        new
                        {
                            CarBookStatusId = 3,
                            Status = "Back"
                        });
                });

            modelBuilder.Entity("ControllerApp.Domains.Cars.CarBooking", b =>
                {
                    b.Property<int>("CarBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BookingFrom")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookingReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BookingTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCaptured")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("CB");

                    b.Property<int>("UserCatured")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CarBookingId");

                    b.HasIndex("CarId");

                    b.HasIndex("UserId");

                    b.ToTable("CarBookings");
                });

            modelBuilder.Entity("ControllerApp.Domains.UserBooks.UserBook", b =>
                {
                    b.Property<int>("UserBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserBookId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBooks");
                });

            modelBuilder.Entity("ControllerApp.Domains.UserBooks.UserBookState", b =>
                {
                    b.Property<int>("UserBookId")
                        .HasColumnType("int");

                    b.Property<int>("UserBookStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UserBookStateDateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserBookStateId")
                        .HasColumnType("int");

                    b.HasKey("UserBookId", "UserBookStatusId");

                    b.HasIndex("UserBookStatusId");

                    b.ToTable("UserBookStates");
                });

            modelBuilder.Entity("ControllerApp.Domains.UserBooks.UserBookStatus", b =>
                {
                    b.Property<int>("UserBookStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserBookStatusId");

                    b.ToTable("UserBookStatuses");

                    b.HasData(
                        new
                        {
                            UserBookStatusId = 1,
                            Description = "Alocate"
                        },
                        new
                        {
                            UserBookStatusId = 2,
                            Description = "Return"
                        });
                });

            modelBuilder.Entity("ControllerApp.Domains.Users.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CellPhonenumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUserWasAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ControllerApp.Domains.Users.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserTypeId");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            UserTypeId = 1,
                            Name = "User"
                        },
                        new
                        {
                            UserTypeId = 2,
                            Name = "Librarian"
                        },
                        new
                        {
                            UserTypeId = 3,
                            Name = "System"
                        });
                });

            modelBuilder.Entity("ControllerApp.Domains.Books.Book", b =>
                {
                    b.HasOne("ControllerApp.Domains.Books.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ControllerApp.Domains.Cars.CarBookState", b =>
                {
                    b.HasOne("ControllerApp.Domains.Cars.CarBooking", "CarBooking")
                        .WithMany("CarBookStates")
                        .HasForeignKey("CarBookStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControllerApp.Domains.Cars.CarBookStatus", "CarBookStatus")
                        .WithMany()
                        .HasForeignKey("CarBookStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ControllerApp.Domains.Cars.CarBooking", b =>
                {
                    b.HasOne("ControllerApp.Domains.Cars.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControllerApp.Domains.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ControllerApp.Domains.UserBooks.UserBook", b =>
                {
                    b.HasOne("ControllerApp.Domains.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControllerApp.Domains.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ControllerApp.Domains.UserBooks.UserBookState", b =>
                {
                    b.HasOne("ControllerApp.Domains.UserBooks.UserBook", "UserBook")
                        .WithMany("UserBookStates")
                        .HasForeignKey("UserBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControllerApp.Domains.UserBooks.UserBookStatus", "UserBookStatus")
                        .WithMany()
                        .HasForeignKey("UserBookStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ControllerApp.Domains.Users.User", b =>
                {
                    b.HasOne("ControllerApp.Domains.Users.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
