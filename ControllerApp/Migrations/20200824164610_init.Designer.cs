// <auto-generated />
using System;
using ControllerApp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ControllerApp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200824164610_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ControllerApp.Domains.Books.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorName")
                        .IsRequired();

                    b.Property<string>("AuthorSurname")
                        .IsRequired();

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("ControllerApp.Domains.Books.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("PublishDate");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ControllerApp.Domains.UserBooks.UserBook", b =>
                {
                    b.Property<int>("UserBookId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId");

                    b.Property<int>("UserId");

                    b.HasKey("UserBookId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBooks");
                });

            modelBuilder.Entity("ControllerApp.Domains.UserBooks.UserBookState", b =>
                {
                    b.Property<int>("UserBookId");

                    b.Property<int>("UserBookStatusId");

                    b.Property<DateTime>("UserBookStateDateUpdated");

                    b.Property<int>("UserBookStateId");

                    b.HasKey("UserBookId", "UserBookStatusId");

                    b.HasIndex("UserBookStatusId");

                    b.ToTable("UserBookStates");
                });

            modelBuilder.Entity("ControllerApp.Domains.UserBooks.UserBookStatus", b =>
                {
                    b.Property<int>("UserBookStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("UserBookStatusId");

                    b.ToTable("UserBookStatuses");

                    b.HasData(
                        new
                        {
                            UserBookStatusId = 1,
                            Description = "Alocate"
                        },
                        new
                        {
                            UserBookStatusId = 2,
                            Description = "Return"
                        });
                });

            modelBuilder.Entity("ControllerApp.Domains.Users.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CellPhonenumber")
                        .IsRequired();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime>("DateUserWasAdded");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Surname");

                    b.Property<int>("UserTypeId");

                    b.HasKey("UserId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ControllerApp.Domains.Users.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("UserTypeId");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            UserTypeId = 1,
                            Name = "User"
                        },
                        new
                        {
                            UserTypeId = 2,
                            Name = "Librarian"
                        });
                });

            modelBuilder.Entity("ControllerApp.Domains.Books.Book", b =>
                {
                    b.HasOne("ControllerApp.Domains.Books.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ControllerApp.Domains.UserBooks.UserBook", b =>
                {
                    b.HasOne("ControllerApp.Domains.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ControllerApp.Domains.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ControllerApp.Domains.UserBooks.UserBookState", b =>
                {
                    b.HasOne("ControllerApp.Domains.UserBooks.UserBook", "UserBook")
                        .WithMany("UserBookStates")
                        .HasForeignKey("UserBookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ControllerApp.Domains.UserBooks.UserBookStatus", "UserBookStatus")
                        .WithMany()
                        .HasForeignKey("UserBookStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ControllerApp.Domains.Users.User", b =>
                {
                    b.HasOne("ControllerApp.Domains.Users.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
